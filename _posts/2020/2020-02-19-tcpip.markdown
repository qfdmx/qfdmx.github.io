---
layout: post
title:  "应用层报文测试"
date:   2020-02-19 20:22:22 +0800
categories: network
tags: tcpip
description: 网络协议基础、wireshark抓包技巧、snmp与tarp初识
---
最近公司要求通过开发的规范文档，校验报文的准确性和装置响应异常报文的情况。虽然不会构造发出tcp交互报文需要工具支持，但是需要抓包进行报文比对分析。本文暂未加入tcpip三次握手等内容，只是实际技能的初始和介绍

### 名词介绍

#### 1.1上行报文和下行报文

报文：通讯中发送的数据包。

    上行：常指从客户端发送至服务器端。
    下行：常指从服务器端发送回客户端。

但对于某些平台和装置的客户端和服务器的概念并不清晰时候会进行单独指出如图：

[![2020-02-19-tcpip-01.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-01.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-01.png)

#### 1.2报文格式与字节

一位十六进制的数等于四位二进制的数。一个字节等于8位二进制数，如二进制1111等于十进制15

    bin：1111
    dec：15

[![2020-02-19-tcpip-02.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-02.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-02.png)

所以两位的十六进制数字即为1字节，两位十六进制数据那么也就可以定义（每一位都是0~f十五个数值） 15*15=255。举例tcp/ip中传输源ip：192.168.25.5换算如下

    dec：192 168 25  5
    hex：c0  a8  19  05  =>(12*16 10*16+8 1*16+9 5)

总结：传输是按照二进制传输的，但是转换成可识别的字符是十六进制，两位十六进制是一个字节

[![2020-02-19-tcpip-03.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-03.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-03.png)

#### 1.3报文封装

我们上面说的报文应用层报文，然后经过TCP/IP协议进行封装，如下图所示：

[![2020-02-19-tcpip-04.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-04.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-04.png)

简图参考

[![2020-02-19-tcpip-05.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-05.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-05.png)

#### 1.4应用层报文分析与wireshark技巧

举例装置客户端向装置发送路由配置请求报文，装置回复给客户端路由配置，装置ip：192.168.8.100，客户端ip：192.168.8.200

linux客户端到监测装置，

[![2020-02-19-tcpip-06.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-06.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-06.png)

监测装置到linux客户端

[![2020-02-19-tcpip-07.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-07.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-07.png)

wireshark手动定位定位技巧

[![2020-02-19-tcpip-08.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-08.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-08.png)

wireshark常用过滤命令行

    1.条件连接符号
    and    or   not
    2.判断符号
    >   <   >=   <=  ==
    3.筛选条件
    源地址 ip.src
    目的值 ip.dst
    应用数据长度 data.len
    协议（不要参数） ssh   tcp   udp  ntp
    4.常用命令推荐
    按照协议和应用层数据长度进行筛选
    tcp and data.len>0    （推荐）
    tcp and data.len>0 and ip.src==192.168.8.200

关于应用层报文内容复制：在data上右键选择复制字节数偏移十六进制

[![2020-02-19-tcpip-09.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-09.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-09.png)

### 1.5snmp与snmp trap

SNMP 是一个协议用来管理网络上的节点，（包括工作站，路由器，交换机，集线器和其他的外围设备）。SNMP是一个应用协议，使用UDP封装进行传输。UDP是一个无连接的传输层协议，在OSI模型中为第四层协议，提供简单的可靠的传输服务。SNMP使网络管理者能够管理网络性能，发现和解决网络问题，规划网络的增长。当前，定义了三个版本的网络管理协议，SNMP v1，SNMP v2，SNMP v3。`SNMP v1，v2有很多共同的特征，SNMP v3 在先前的版本地基础上增加了安全和远程配置能力 。`为了解决不同版本的兼容性问题，RFC3584定义了共存策略。

`SNMP trap(SNMP 陷阱)：某种入口，到达该入口会使SNMP被管设备主动通知SNMP管理器,而不是等待SNMP管理器的再次轮询。`在网管系统中，被管理设备中的代理可以在任何时候向网络管理工作站报告错误情况，例如预制定阈值越界程度等等。代理并不需要等到管理工作站为获得这些错误情况而轮询他的时候才会报告。这些错误情况就是众所周知的SNMP自陷（trap）。

### 报文内容格式分析

#### 名称校验

名称英文字母是按照一个字节传输的，可以通过如下网站工具进行转化，[十六进制转字符](http://www.bejson.com/convert/ox2str/)，如图参考

[![2020-02-19-tcpip-10.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-10.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-10.png)

#### 设备类型与事件等级

设备类型和事件等级在传递参数时候，每种设备和事件等级都存在独立的两种可能，勾选与不勾选，对于同时多种值的情况下。可以转化成二进制数据来表示，每种类型占用一个二进制位，然后进行或运算，保证该位置为1时，该种类型处于勾选状态。这种功能类似于linux文件属性中数字表达的设计。规范的描述如下

    网络序，为0表示未设置，其他定义如下：
    0x01服务器工作站类，0x02数据库，0x04网络设备，0x08横向正向隔离装置，0x10横向反向隔离装置，0x20纵向加密装置，0x40防火墙，0x80入侵检测系统，0x100防病毒系统，0x200网络安全监测装置。可通过或(|)的方式进行组合。

转化成表格形式如下

[![2020-02-19-tcpip-11.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-11.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-11.png)

"或与非"计算方式如下

[![2020-02-19-tcpip-12.png]({{ site.baseurl }}\assets\post_image\2020\2020-02-19-tcpip-12.png)](https://qfdmx.github.io/assets/post_image/2020/2020-02-19-tcpip-12.png)

#### 时间内容

时间传输方式：本地当前时间转换成UTC时间后相对于UTC时间1970-01-01 00:00:00所经历的秒数。
网络序，为0表示从第一条记录开始

shell命令行指定时间至1970初始时间到秒的双向转换

    date -d '@1644940800'  "+%Y-%m-%d %H:%M:%S"
    date -d '2022-02-16 00:00:01' +%s

#### 网络序

‭[参考链接1](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%8F/4486226?fr=aladdin)[参考链接2](https://blog.csdn.net/daaikuaichuan/article/details/83061117),以下字顺序来自维基百科

字节顺序，又称端序或尾序（英语：Endianness），在计算机科学领域中，指存储器中或在数字通信链路中，组成多字节的字的字节的排列顺序。

在几乎所有的机器上，多字节对象都被存储为连续的字节序列。例如在C语言中，一个类型为int的变量x地址为0x100，那么其对应地址表达式&x的值为0x100。且x的四个字节将被存储在存储器的0x100, 0x101, 0x102, 0x103位置。

字节的排列方式有两个通用规则。例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以均按照网络标准转化。

例如假设上述变量x类型为int，位于地址0x100处，它的值为0x01234567，地址范围为0x100~0x103字节，其内部排列顺序依赖于机器的类型。大端法从首位开始将是：0x100: 01, 0x101: 23,..。而小端法将是：0x100: 67, 0x101: 45,..。

网络传输一般采用大端序，也被称之为网络字节序，或网络序，即先发送高字节数据再发送低字节数据（如：四个字节由高位向低位用0-31标示后，将首先发送0-7位第一字节，在发送8-15第二字节，以此下去）。IP协议中定义大端为网络字节序。

    0x12 34 56 78
    低  ->  高
