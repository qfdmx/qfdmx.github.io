---
layout: post
title:  "shell awk 绝杀"
date:   2019-06-23 00:00:01 +0800
categories: program
tags: shell awk
description: awk太好用了，我不行了，我要用它灭天灭地，为此单独开篇awk积累的日志
---
##### awk详细内容请参考[awk手册](http://www.gnu.org/software/gawk/manual/gawk.html)

&emsp;&emsp;awk作为文本处理工具非常实用，甚至可以进行编程。。。。。。没错非常强大，下面针对本人日常用到的部分进行记录。便于日后查阅

练习文本txt如下

    ip name occrtime starttime rate
    192.168.25.12 ha1 2019-05-18 05:25:23.000 2019-05-19 09:25:23.000 420
    192.168.25.12 ha1 2019-05-19 11:25:23.000 2019-05-19 13:59:00.000 2
    192.168.25.12 ha1 2019-05-19 14:25:23.000 2019-05-19 23:59:00.000 2

&nbsp;

### 内置参数

|属性|说明|
|:-:|:-:|
|`$0`|当前记录（作为单个变量）|
|`$1~$n`|当前记录的第n个字段，字段间由FS分隔|
|NF|当前记录中的字段个数，就是有多少列|
|NR|已经读出的记录数，就是行号，从1开始|
|BEGIN|开始|
|END|结束|

#### 行与列

awk具有行与列的概念，用分隔符分列，然后按照行处理任务

* 分隔符（-F）

{% highlight ruby %}
#默认使用空格和tab分列，不计算个数以下三种等价
awk '{print $1}' txt
awk -F' ' '{print $1}' txt
awk -F ' ' '{print $1}' txt

#使用"|"进行分割
awk -F'|' '{print $1}' txt

#使用两种或者多种字符进行分割（使用空格和&进行分割）
awk -F' |&' '{print $1}' txt
{% endhighlight %}

* NR为行记录

{% highlight ruby %}
#打印小于2行以内所有内容
awk 'NR<=2' txt
#打印小于2行以内分列第二列内容
awk 'NR<=2{print $2}' txt
#打印2~3行以内分列第二列内容
awk 'NR>1 && NR<=3{print $2}' txt
{% endhighlight %}

* NF为列记录

{% highlight ruby %}
#打印2,3,NF(尾列)并用|分割
awk -F'|' '{print $2"|"$3"|"$NF}' txt
#`第三列为空其他列正常打印`
awk '{ $3=""; print $0 }' txt
#打印内容引用shell变量$line
awk -F'|' '{print $2'$line'$NF}' txx
{% endhighlight %}

#### BEGIN与END

{% highlight ruby %}
#统计登录shell为bash的用户
awk -F: 'BEGIN{i=0}{if($7~/bash$/){i++}}END{print i}' /etc/passwd
#统计/etc/passwd下uid小于500的用户个数
awk -F: 'BEGIN{i=0}{if($3<500){i++}}END{print i}' /etc/passwd
{% endhighlight %}

&nbsp;

### 判断

{% highlight ruby %}
awk  -F","  '{ if($4=="江苏"){print $1} else {print  $0} } txt
{% endhighlight %}

&nbsp;

### 循环

{% highlight ruby %}
awk -F '' '{for(i=1;i<=NF;i++){print $i}}' txt
{% endhighlight %}

&nbsp;

### 字符串

{% highlight ruby %}
#某列完全匹配某字符
awk  -F","  '{ if($4=="江苏"){print $1} else {print  $0} } '  test.txt
#某列包含某字符
awk -F '|' '{if($4~"'$line'") print $0}' txt
{% endhighlight %}

&nbsp;

### awk转义

当遇见\'时候，awk需要转义

    awk -F "\'" '{for(i=2;i<=NF;i++) printf $i;print "" }' pdwg

但是将该结果输出到文件会报错

    awk -F "\'" '{for(i=2;i<=NF;i++) printf $i;print "" }' pdwg > pdwg1
    awk: warning: escape sequence `\'' treated as plain `''

建议使用sed将\'转换后使用awk，否则本身是存在和shell的解析冲突

    s#'\''##g' pdwg > pdwg1

### awk打印

    "'\''"
    awk '{print "'\''192.168.25.118'\'','\''md5sum "$0"'\''"}' list-118

------------------------

### 日常处理实例

* 将一整行文件按照字符逐个换行

{% highlight ruby %}
awk -F'|' '{print $4}' txt | xargs | sed 's/ //g' |awk -F '' '{for(i=1;i<=NF;i++){print $i}}'
{% endhighlight %}

* 日本汉字进行去重后，逐字匹配所有文本包含行

{% highlight ruby %}
#生成整行文字并进行换行去重
awk -F'|' '{print $4}' txt | xargs | sed 's/ //g' |awk -F '' '{for(i=1;i<=NF;i++){print $i}}' |sort |uniq  > t
#将筛选的文字进行匹配
while read line;do echo "=== $line ===="; awk -F '|' '{if($4~"'$line'") print $0}' txt   ;done < t > list
{% endhighlight %}

* 将第一行文字按照2列一行，进行换行

{% highlight ruby %}
awk  'NR==1{for(i=1;i<NF;i++)if(i%2==0){print $i}else{printf $i" "}}' txt
{% endhighlight %}

* txt中第4列匹配到13这个字符，将该行该列内容替换为6666666

{% highlight ruby %}
awk '{if($6~13){ $6="6666666"; print $0 }else{print $0}}' txt
{% endhighlight %}

* txt文件隔行进行时间分钟计算

{% highlight ruby %}
awk 'NR>1{for(i=1;i<=NF;i++){if(i==4 || i==6){print $i}}}' txt | awk -F':' '{a=$1*60+$2;print a}' |awk 'NR>1{if(NR%2==0){s=$1}else{e=$1-s;toal+=e}}END{print toal}'
{% endhighlight %}

* 将第1列第2列和之后内容作为第三列并用\|分割打印

{% highlight ruby %}
awk '{printf "|"$1"|"$2"|"}{for (i=3;i<=NF;i++)printf $i" "}{print "|"}' txt
{% endhighlight %}

* awk某列求和

{% highlight ruby %}
awk 'NR>1 && NR<5{a=+ $3}END{print a}'  realtime.txt
{% endhighlight %}
